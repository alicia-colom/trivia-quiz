{"version":3,"sources":["services/API.tsx","utils.tsx","components/QuestionCard.styles.ts","components/QuestionCard.tsx","images/bg-pink-horizontal.jpg","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNumber","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","i","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","ev","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08ea837a.chunk.js","sourcesContent":["import { shuffleArray } from '../utils';\n\nexport type Question = {\n\tcategory: string;\n\tcorrect_answer: string;\n\tdifficulty: string;\n\tincorrect_answers: string[];\n\tquestion: string;\n\ttype: string;\n};\n\nexport type QuestionState = Question & { answers: string[] };\n\nexport enum Difficulty {\n\tEASY = 'easy',\n\tMED = 'medium',\n\tHARD = 'hard',\n}\n\nexport const fetchQuizQuestions = async (\n\tamount: number,\n\tdifficulty: Difficulty\n) => {\n\tconst endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n\tconst data = await (await fetch(endpoint)).json();\n\treturn data.results.map((question: Question) => ({\n\t\t...question,\n\t\tanswers: shuffleArray([\n\t\t\t...question.incorrect_answers,\n\t\t\tquestion.correct_answer,\n\t\t]),\n\t}));\n};\n","// Function to randomized the order when showing the answers\nexport const shuffleArray = (array: any[]) =>\n\t[...array].sort(() => Math.random() - 0.5);\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n\tmax-width: 1100px;\n\tbackground: rgba(255, 255, 255, 0.8);\n\tborder-radius: 15px;\n\tborder: 2px solid #6e0728;\n\tpadding: 20px;\n\tbox-shadow: 0px 10px 15px rgba(0, 0, 0, 0.3);\n\ttext-align: center;\n\tp {\n\t\tfont-size: 1rem;\n\t}\n\t.number {\n\t\tmargin: 10px 0 0 0;\n\t\tfont-size: 0.85rem;\n\t\tfont-style: italic;\n\t\t@media (max-width: 500px) {\n\t\t\tfont-size: 0.7rem;\n\t\t}\n\t}\n`;\n\ntype ButtonWrapperProps = {\n\tcorrect: boolean;\n\tuserClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n\ttransition: all 0.3s ease;\n\t:hover {\n\t\topacity: 0.75;\n\t}\n\tbutton {\n\t\tcursor: pointer;\n\t\twidth: 100%;\n\t\theight: 40px;\n\t\tmargin: 5px 0;\n\t\tbackground: ${({ correct, userClicked }) =>\n\t\t\tcorrect\n\t\t\t\t? '#0fca6c'\n\t\t\t\t: !correct && userClicked\n\t\t\t\t? '#ff4343'\n\t\t\t\t: 'linear-gradient(90deg, #f34194, #7c0229)'};\n\t\tuser-select: none;\n\t\tborder: 3px solid #ffffff;\n\t\tbox-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n\t\tborder-radius: 10px;\n\t\tfont-size: 0.85rem;\n\t\tcolor: #fefefe;\n\t\ttext-shadow: 0px 1px 0px rgba(0, 0, 0, 0.4);\n\t}\n`;\n","import React from 'react';\n//Types\nimport { AnswerObject } from '../App';\n// Styles\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\n\ntype Props = {\n\tquestion: string;\n\tanswers: string[];\n\tcallback: (ev: React.MouseEvent<HTMLButtonElement>) => void;\n\tuserAnswer: AnswerObject | undefined;\n\tquestionNumber: number;\n\ttotalQuestions: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n\tquestion,\n\tanswers,\n\tcallback,\n\tuserAnswer,\n\tquestionNumber,\n\ttotalQuestions,\n}) => {\n\treturn (\n\t\t<Wrapper>\n\t\t\t<p className=\"number\">\n\t\t\t\tQuestion: {questionNumber} / {totalQuestions}\n\t\t\t</p>\n\t\t\t<p dangerouslySetInnerHTML={{ __html: question }}></p>\n\n\t\t\t<div>\n\t\t\t\t{answers.map((answer, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<ButtonWrapper\n\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\tcorrect={userAnswer?.correctAnswer === answer}\n\t\t\t\t\t\t\tuserClicked={userAnswer?.answer === answer}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tdisabled={userAnswer ? true : false}\n\t\t\t\t\t\t\t\tvalue={answer}\n\t\t\t\t\t\t\t\tonClick={callback}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<span dangerouslySetInnerHTML={{ __html: answer }} />\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</ButtonWrapper>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</Wrapper>\n\t);\n};\n\nexport default QuestionCard;\n","export default __webpack_public_path__ + \"static/media/bg-pink-horizontal.18a04b8f.jpg\";","import styled, { createGlobalStyle } from 'styled-components';\nimport BGImage from './images/bg-pink-horizontal.jpg';\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n    height: 100%;\n  }\n  body {\n    background-image: url(${BGImage});\n    background-size: cover;\n    display: flex;\n    justify-content: center;\n  }\n  * {\n    box-sizing: border-box;\n    font-family: 'Poppins', sans-serif;\n    font-weight: 400;\n  }\n`;\n\nexport const Wrapper = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n  max-width: 80vw;\n\tborder-radius: 20px;\n\tpadding: 0 20px 20px 20px;\n  text-align: center;\n  color: #212121;\n  @media (max-width: 600px) {\n    max-width: 100vw;\n\n    }\n\t}\n\t.score {\n    margin: 10px;\n\t\tfont-size: 2rem;\n    font-weight: 700;\n    color: #fefefe;\n    @media (max-width: 600px) {\n      font-size: 1.75rem;\n    }\n    @media (max-width: 500px) {\n      font-size: 1.25rem;\n      margin: 7px;\n    }\n\t}\n\n\t.title {\n\t\tfont-family: Fascinate Inline;\n\t\tbackground-color: rgba(255, 255, 255, 0.75);\n\t\tfont-weight: 400;\n\t\tfont-size: 70px;\n    text-transform: capitalize;\n\t\tmargin: 20px;\n\t\tpadding: 12px 20px;\n\t\tborder-radius: 20px;\n\t\tcolor: #8d104b;\n\t\tborder: 2px solid #fefefe;\n  \tbox-shadow: 0px 10px 15px rgba(0, 0, 0, 0.3);\n    @media (max-width: 680px) {\n      font-size: 50px;\n    }\n    @media (max-width: 500px) {\n      font-size: 30px;\n\t  \tpadding: 8px 12px;\n\t\t  margin: 8px;\n    }\n\t}\n\t.start,\n\t.next {\n\t\tcursor: pointer;\n\t\tbackground-color: #8d104b;\n\t\tborder: 3px solid #fefefe;\n    color: #fefefe;\n\t\tborder-radius: 15px;\n\t\theight: 45px;\n\t\tmargin: 20px 0;\n\t\tpadding: 0 40px;\n\t\tfont-size: 1rem;\n    font-weight: 700;\n\t}\n\t.start {\n\t\tmax-width: 200px;\n\t}\n`;\n","import React, { useState } from 'react';\nimport { fetchQuizQuestions } from './services/API';\n// Components\nimport QuestionCard from './components/QuestionCard';\n// Types\nimport { QuestionState, Difficulty } from './services/API';\n// Styles\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n\tquestion: string;\n\tanswer: string;\n\tcorrect: boolean;\n\tcorrectAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nfunction App() {\n\tconst [loading, setLoading] = useState(false);\n\tconst [questions, setQuestions] = useState<QuestionState[]>([]);\n\tconst [number, setNumber] = useState(0);\n\tconst [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n\tconst [score, setScore] = useState(0);\n\tconst [gameOver, setGameOver] = useState(true);\n\n\tconst startTrivia = async () => {\n\t\tsetLoading(true);\n\t\tsetGameOver(false);\n\n\t\tconst newQuestions = await fetchQuizQuestions(\n\t\t\tTOTAL_QUESTIONS,\n\t\t\tDifficulty.EASY\n\t\t);\n\n\t\tsetQuestions(newQuestions);\n\t\tsetScore(0);\n\t\tsetUserAnswers([]);\n\t\tsetNumber(0);\n\t\tsetLoading(false);\n\t};\n\n\tconst checkAnswer = (ev: React.MouseEvent<HTMLButtonElement>) => {\n\t\tif (!gameOver) {\n\t\t\t//Users answer\n\t\t\tconst answer = ev.currentTarget.value;\n\t\t\t//Check answer against the correct answer\n\t\t\tconst correct = questions[number].correct_answer === answer;\n\t\t\t//Add score if answer is correct\n\t\t\tif (correct) setScore((prev) => prev + 1);\n\t\t\t//Save answer in the array userAnswers\n\t\t\tconst answerObject: AnswerObject = {\n\t\t\t\tquestion: questions[number].question,\n\t\t\t\tanswer: answer,\n\t\t\t\tcorrect: correct,\n\t\t\t\tcorrectAnswer: questions[number].correct_answer,\n\t\t\t};\n\t\t\tsetUserAnswers((prev) => [...prev, answerObject]);\n\t\t}\n\t};\n\n\tconst nextQuestion = () => {\n\t\t//Move onto the next question if it's not the last question in the quiz\n\t\tconst nextQuestion = number + 1;\n\n\t\tif (nextQuestion === TOTAL_QUESTIONS) {\n\t\t\tsetGameOver(true);\n\t\t} else {\n\t\t\tsetNumber(nextQuestion);\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<GlobalStyle />\n\t\t\t\t<Wrapper>\n\t\t\t\t\t<h1 className=\"title\">Trivia quiz</h1>\n\n\t\t\t\t\t{gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n\t\t\t\t\t\t<button className=\"start\" onClick={startTrivia}>\n\t\t\t\t\t\t\tStart quiz\n\t\t\t\t\t\t</button>\n\t\t\t\t\t) : null}\n\n\t\t\t\t\t{gameOver ? null : <p className=\"score\">Your score: {score}</p>}\n\n\t\t\t\t\t{loading && <p className=\"loadingQuestion\">Loading questions...</p>}\n\n\t\t\t\t\t{!gameOver && !loading && (\n\t\t\t\t\t\t<QuestionCard\n\t\t\t\t\t\t\tquestionNumber={number + 1}\n\t\t\t\t\t\t\ttotalQuestions={TOTAL_QUESTIONS}\n\t\t\t\t\t\t\tquestion={questions[number].question}\n\t\t\t\t\t\t\tanswers={questions[number].answers}\n\t\t\t\t\t\t\tuserAnswer={userAnswers ? userAnswers[number] : undefined}\n\t\t\t\t\t\t\tcallback={checkAnswer}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\n\t\t\t\t\t{!gameOver &&\n\t\t\t\t\t!loading &&\n\t\t\t\t\tuserAnswers.length === number + 1 &&\n\t\t\t\t\tnumber !== TOTAL_QUESTIONS - 1 ? (\n\t\t\t\t\t\t<button className=\"next\" onClick={nextQuestion}>\n\t\t\t\t\t\t\tNext question\n\t\t\t\t\t\t</button>\n\t\t\t\t\t) : null}\n\t\t\t\t</Wrapper>\n\t\t</>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}